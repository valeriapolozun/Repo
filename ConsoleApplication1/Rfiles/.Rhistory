average=c(,3)
average
average=c()
average
average=c(,3)
n = 10 #15 #30
k = 6
results = c()
resultstime = c()
tnames = c()
greedyTours = c()
impTours = c()
for(seed in 1:k){
instance = TSPinstance(n,2,type='random1',seed = seed)
tnames = c('seed','NN','NN 2opt standard')
for(s in 1:50){
    resultrow = c(seed)
    resultsrowtime = c(seed)
    cput = system.time(
     {tourNN = TSPgreedy_rand(instance$D) }
    )[1]
    greedyTours=rbind(greedyTours, tourNN)
    resultrow = c(resultrow,distance(instance$D,tourNN))
    resultsrowtime = c(resultsrowtime,cput)
    cput = system.time(
     {tour = twooptfirstimp(instance$D,tourNN) }
    )[1]
    impTours = rbind(impTours, tour)
    resultrow = c(resultrow,distance(instance$D,tour))
    resultsrowtime = c(resultsrowtime,cput)
    results = rbind(results,resultrow)
    resultstime = rbind(resultstime,resultsrowtime)
}
averagerow=c(average,seed,  mean(results[((seed-1)*50+1): (seed*50), 2]),mean(results[((seed-1)*50+1): (seed*50), 3]))
averages=rbind(average, averagerow)
}
averages
n = 10 #15 #30
k = 6
results = c()
resultstime = c()
tnames = c()
greedyTours = c()
impTours = c()
for(seed in 1:k){
instance = TSPinstance(n,2,type='random1',seed = seed)
tnames = c('seed','NN','NN 2opt standard')
for(s in 1:50){
    resultrow = c(seed)
    resultsrowtime = c(seed)
    cput = system.time(
     {tourNN = TSPgreedy_rand(instance$D) }
    )[1]
    greedyTours=rbind(greedyTours, tourNN)
    resultrow = c(resultrow,distance(instance$D,tourNN))
    resultsrowtime = c(resultsrowtime,cput)
    cput = system.time(
     {tour = twooptfirstimp(instance$D,tourNN) }
    )[1]
    impTours = rbind(impTours, tour)
    resultrow = c(resultrow,distance(instance$D,tour))
    resultsrowtime = c(resultsrowtime,cput)
    results = rbind(results,resultrow)
    resultstime = rbind(resultstime,resultsrowtime)
}
averagerow=c(seed,  mean(results[((seed-1)*50+1): (seed*50), 2]),mean(results[((seed-1)*50+1): (seed*50), 3]))
averages=rbind(averages, averagerow)
}
averages
n = 10 #15 #30
k = 6
results = c()
resultstime = c()
tnames = c()
averages=c()
greedyTours = c()
impTours = c()
for(seed in 1:k){
instance = TSPinstance(n,2,type='random1',seed = seed)
tnames = c('seed','NN','NN 2opt standard')
for(s in 1:50){
    resultrow = c(seed)
    resultsrowtime = c(seed)
    cput = system.time(
     {tourNN = TSPgreedy_rand(instance$D) }
    )[1]
    greedyTours=rbind(greedyTours, tourNN)
    resultrow = c(resultrow,distance(instance$D,tourNN))
    resultsrowtime = c(resultsrowtime,cput)
    cput = system.time(
     {tour = twooptfirstimp(instance$D,tourNN) }
    )[1]
    impTours = rbind(impTours, tour)
    resultrow = c(resultrow,distance(instance$D,tour))
    resultsrowtime = c(resultsrowtime,cput)
    results = rbind(results,resultrow)
    resultstime = rbind(resultstime,resultsrowtime)
}
averagerow=c(seed,  mean(results[((seed-1)*50+1): (seed*50), 2]),mean(results[((seed-1)*50+1): (seed*50), 3]))
averages=rbind(averages, averagerow)
}
averages
plot(results[,2],results[,3],xlab='Initial solutions', ylab='2-opt improved',main='The effect of local search',xlim=c(0, 1500), ylim=c(0, 1500))
cor(averages[,2],averages[,3])
plot(averages[,2],averages[,3])
n = 10 #15 #30
k = 6
results = c()
resultstime = c()
tnames = c()
averages=c()
greedyTours = c()
impTours = c()
for(seed in 1:k){
instance = TSPinstance(n,2,type='random1',seed = seed)
tnames = c('seed','NN','NN 2opt standard')
for(s in 1:50){
    resultrow = c(seed)
    resultsrowtime = c(seed)
    cput = system.time(
     {tourNN = TSPgreedy_rand(instance$D) }
    )[1]
    greedyTours=rbind(greedyTours, tourNN)
    resultrow = c(resultrow,distance(instance$D,tourNN))
    resultsrowtime = c(resultsrowtime,cput)
    cput = system.time(
     {tour = twooptfirstimp(instance$D,tourNN) }
    )[1]
    impTours = rbind(impTours, tour)
    resultrow = c(resultrow,distance(instance$D,tour))
    resultsrowtime = c(resultsrowtime,cput)
    results = rbind(results,resultrow)
    resultstime = rbind(resultstime,resultsrowtime)
}
averagerow=c(seed,  mean(results[((seed-1)*50+1): (seed*50), 2]),mean(results[((seed-1)*50+1): (seed*50), 3]))
averages=rbind(averages, averagerow)
}
cor(averages[,2],averages[,3])
plot(averages[,2],averages[,3])
plot(averages[,2],averages[,3])
mypoints<-matrix(c(1,1,8,1,2,2.5,3,2.5,4,2.5,5,2.5,6,2.5,7,2.5,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3),2,16)
plot(mypoints[1,],mypoints[2,])
n = dim(mypoints)[2];
print(n)
tcost = matrix(0,n,n);
for( i in 1:n){
for( j in 1:n){
   tcost[i,j]=(sum(abs(mypoints[,i]-mypoints[,j])^2))^(1/2);
}
}
tcost
TSPgreedy = function (D){
    n = length(D[,1])
tour = c(1)
vleft = 2:n;
for(i in 1:n){
k = which.min(D[tour[1],vleft]);
tour = c(vleft[k],tour);
vleft = vleft[-k];
}
rev(tour)
}
tour=TSPgreedy(tcost)
tour
printtour = function(mypoints,tour,txttitle=' '){
 n = length(tour)
 #plot(mypoints,cex=3, main=txttitle)
 plot(mypoints[1,],mypoints[2,])
 text(mypoints[1,],mypoints[2,], labels =1:n, cex= 2, offset = 10)
 lines(mypoints[1,c(tour,tour[1])],mypoints[2,c(tour,tour[1])]) 
}
x1=printtour(mypoints, tour, 'Tour with NN')
distancematrix =  function(mypoints,p){
n = dim(mypoints)[1];
print(n)
tcost = matrix(0,n,n);
for( i in 1:n){
for( j in 1:n){
   tcost[i,j]=(sum(abs(mypointsx[i,]-mypointsx[j,])^2+(mypointsy[i,]-mypointsy[j,])^2)^(1/2);
}
}
tcost
}
distancematrix(mypointsx,mypointsy)
mypoints<-matrix(c(1,1,8,1,2,2.5,3,2.5,4,2.5,5,2.5,6,2.5,7,2.5,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3),2,16)
plot(mypoints[1,],mypoints[2,])
n = dim(mypoints)[2];
print(n)
tcost = matrix(0,n,n);
for( i in 1:n){
for( j in 1:n){
   tcost[i,j]=(sum(abs(mypoints[,i]-mypoints[,j])^2))^(1/2);
}
}
tcost
TSPgreedy = function (D){
    n = length(D[,1])
tour = c(1)
vleft = 2:n;
for(i in 1:n){
k = which.min(D[tour[1],vleft]);
tour = c(vleft[k],tour);
vleft = vleft[-k];
}
rev(tour)
}
tour=TSPgreedy(tcost)
tour
printtour = function(mypoints,tour,txttitle=' '){
 n = length(tour)
 #plot(mypoints,cex=3, main=txttitle)
 plot(mypoints[1,],mypoints[2,])
 text(mypoints[1,],mypoints[2,], labels =1:n, cex= 2, offset = 10)
 lines(mypoints[1,c(tour,tour[1])],mypoints[2,c(tour,tour[1])]) 
}
x1=printtour(mypoints, tour, 'Tour with NN')
x1
x1=printtour(mypoints, tour, 'Tour with NN')
distance = function(tcost,tour)   {
   tlen = 0;
   n = length(tour)
   for (i in 1:(n-1)){
tlen = tlen + tcost[tour[i],tour[i+1]];
   }
   tlen + tcost[tour[n],tour[1]]
}
distance(tcost, tour)
mypoints<-matrix(c(1,1,8,1,2,2.5,3,2.5,4,2.5,5,2.5,6,2.5,7,2.5,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3),2,16)
plot(mypoints[1,],mypoints[2,])
n = dim(mypoints)[2];
print(n)
tcost = matrix(0,n,n);
for( i in 1:n){
for( j in 1:n){
   tcost[i,j]=(sum(abs(mypoints[,i]-mypoints[,j])^2))^(1/2);
}
}
tcost
TSPgreedy = function (D, startingnode){
    n = length(D[,1])
tour = c(startingnode)
vleft = 2:n;
for(i in 1:n){
k = which.min(D[tour[1],vleft]);
tour = c(vleft[k],tour);
vleft = vleft[-k];
}
rev(tour)
}
x1=TSPgreedy(tcost, 1)
x1
printtour = function(mypoints,tour,txttitle=' '){
 n = length(tour)
 #plot(mypoints,cex=3, main=txttitle)
 plot(mypoints[1,],mypoints[2,])
 text(mypoints[1,],mypoints[2,], labels =1:n, cex= 2, offset = 10)
 lines(mypoints[1,c(tour,tour[1])],mypoints[2,c(tour,tour[1])]) 
}
printtour(mypoints, tour, 'Tour with NN')
distance = function(tcost,tour)   {
   tlen = 0;
   n = length(tour)
   for (i in 1:(n-1)){
tlen = tlen + tcost[tour[i],tour[i+1]];
   }
   tlen + tcost[tour[n],tour[1]]
}
distance(tcost, x1)
x2=TSPgreedy(tcost, 9)
x2
TSPgreedy = function (D, startingnode){
    n = length(D[,1])
tour = c(startingnode)
vleft = (1:n, -startingnode);
for(i in 1:n){
k = which.min(D[tour[1],vleft]);
tour = c(vleft[k],tour);
vleft = vleft[-k];
}
rev(tour)
}
TSPgreedy = function (D, startingnode){
    n = length(D[,1])
tour = c(startingnode)
vleft = 1:n;
vleft= vleft[-startingnode]
for(i in 1:n){
k = which.min(D[tour[1],vleft]);
tour = c(vleft[k],tour);
vleft = vleft[-k];
}
rev(tour)
}
mypoints<-matrix(c(1,1,8,1,2,2.5,3,2.5,4,2.5,5,2.5,6,2.5,7,2.5,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3),2,16)
plot(mypoints[1,],mypoints[2,])
n = dim(mypoints)[2];
print(n)
tcost = matrix(0,n,n);
for( i in 1:n){
for( j in 1:n){
   tcost[i,j]=(sum(abs(mypoints[,i]-mypoints[,j])^2))^(1/2);
}
}
tcost
TSPgreedy = function (D, startingnode){
    n = length(D[,1])
tour = c(startingnode)
vleft = 1:n;
vleft= vleft[-startingnode]
for(i in 1:n){
k = which.min(D[tour[1],vleft]);
tour = c(vleft[k],tour);
vleft = vleft[-k];
}
rev(tour)
}
x1=TSPgreedy(tcost, 1)
x1
printtour = function(mypoints,tour,txttitle=' '){
 n = length(tour)
 #plot(mypoints,cex=3, main=txttitle)
 plot(mypoints[1,],mypoints[2,])
 text(mypoints[1,],mypoints[2,], labels =1:n, cex= 2, offset = 10)
 lines(mypoints[1,c(tour,tour[1])],mypoints[2,c(tour,tour[1])]) 
}
printtour(mypoints, tour, 'Tour with NN')
distance = function(tcost,tour)   {
   tlen = 0;
   n = length(tour)
   for (i in 1:(n-1)){
tlen = tlen + tcost[tour[i],tour[i+1]];
   }
   tlen + tcost[tour[n],tour[1]]
}
distance(tcost, x1)
x2=TSPgreedy(tcost, 9)
x2
distance(tcost, x2)
twooptbestimp = function(tcost,tour)   {
   n = length(tour)
   tour = c(tour,tour)
   l = floor((n-2)/2);
   criterion = TRUE;
   while(criterion){
   criterion = FALSE;
   zdelta = 0;
   scand = 0;
   icand = 0;
   for (s in 1:l){ # length of seq
for(i in 1:n){ # start
if ( tcost[tour[i+s],tour[n+i-1]] + tcost[tour[i],tour[i+s+1]] - tcost[tour[i],tour[n+i-1]]- tcost[tour[i+s],tour[i+s+1]] <  zdelta -1e-8   ){
  scand = s;
  icand = i;
  #print(zdelta)
  zdelta = tcost[tour[i+s],tour[n+i-1]] + tcost[tour[i],tour[i+s+1]] - tcost[tour[i],tour[n+i-1]]- tcost[tour[i+s],tour[i+s+1]];
  criterion = TRUE
} 
}
   }
   if(criterion == TRUE){
        i = icand
s = scand
tour = c(rev(tour[i:(i+s)]),tour[(i+s+1):(i+s+(n-s)-1)])
tour = c(tour,tour)
   }
}
    tour = tour[1:n]
}
twooptbestimp(tcost, x1)
x1
twooptbestimp(tcost, x2)
distance(tcost, x1)
distance(tcost, x2)
mypoints<-matrix(c(1,1,8,1,2,2.5,3,2.5,4,2.5,5,2.5,6,2.5,7,2.5,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3),2,16)
plot(mypoints[1,],mypoints[2,])
n = dim(mypoints)[2];
print(n)
tcost = matrix(0,n,n);
for( i in 1:n){
for( j in 1:n){
   tcost[i,j]=(sum(abs(mypoints[,i]-mypoints[,j])^2))^(1/2);
}
}
tcost
TSPgreedy = function (D, startingnode){
    n = length(D[,1])
tour = c(startingnode)
vleft = 1:n;
vleft= vleft[-startingnode]
for(i in 1:n){
k = which.min(D[tour[1],vleft]);
tour = c(vleft[k],tour);
vleft = vleft[-k];
}
rev(tour)
}
x1=TSPgreedy(tcost, 1)
x1
printtour = function(mypoints,tour,txttitle=' '){
 n = length(tour)
 #plot(mypoints,cex=3, main=txttitle)
 plot(mypoints[1,],mypoints[2,])
 text(mypoints[1,],mypoints[2,], labels =1:n, cex= 2, offset = 10)
 lines(mypoints[1,c(tour,tour[1])],mypoints[2,c(tour,tour[1])]) 
}
printtour(mypoints, tour, 'Tour with NN')
distance = function(tcost,tour)   {
   tlen = 0;
   n = length(tour)
   for (i in 1:(n-1)){
tlen = tlen + tcost[tour[i],tour[i+1]];
   }
   tlen + tcost[tour[n],tour[1]]
}
distance(tcost, x1)
x2=TSPgreedy(tcost, 9)
x2
distance(tcost, x2)
twooptbestimp = function(tcost,tour)   {
   n = length(tour)
   tour = c(tour,tour)
   l = floor((n-2)/2);
   criterion = TRUE;
   while(criterion){
   criterion = FALSE;
   zdelta = 0;
   scand = 0;
   icand = 0;
   for (s in 1:l){ # length of seq
for(i in 1:n){ # start
if ( tcost[tour[i+s],tour[n+i-1]] + tcost[tour[i],tour[i+s+1]] - tcost[tour[i],tour[n+i-1]]- tcost[tour[i+s],tour[i+s+1]] <  zdelta -1e-8   ){
  scand = s;
  icand = i;
  #print(zdelta)
  zdelta = tcost[tour[i+s],tour[n+i-1]] + tcost[tour[i],tour[i+s+1]] - tcost[tour[i],tour[n+i-1]]- tcost[tour[i+s],tour[i+s+1]];
  criterion = TRUE
} 
}
   }
   if(criterion == TRUE){
        i = icand
s = scand
tour = c(rev(tour[i:(i+s)]),tour[(i+s+1):(i+s+(n-s)-1)])
tour = c(tour,tour)
   }
}
    tour = tour[1:n]
}
x1
x2
twooptbestimp(tcost, x1)
twooptbestimp(tcost, x2)
distance(tcost, x1)
distance(tcost, x2)
x3= (1,3,4,5,6,7,8,2,16,15,14,13,12,11,10,9)
x3
x3= c(1,3,4,5,6,7,8,2,16,15,14,13,12,11,10,9)
x3
twooptbestimp(tcost, x3)
x3
distance(tcost, x3)
twooptbestimp(tcost, x3)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
update.packages(ask='graphics',checkBuilt=TRUE)
setwd('C:\\Users\\User\\Documents\\Visual Studio 2012\\Projects\\Repo\\ConsoleApplication1\\Rfiles\\')
source('printsol.r')
source('example1.txt')
source('example2.txt')
pdf('test123.pdf', width = 25, height = 10) #paper = "a4r",
printsol(instance1,tmax,lmax,result$tour,result$intensity,type = "circle",ctourfactor=1)
dev.off()
pdf('test123.pdf', width = 25, height = 10) #paper = "a4r",
printsol(instance1,tmax,lmax,result$tour,result$intensity,type = "rectangle",ctourfactor=1)
dev.off()
save.image()
#quit(save = 'no')
utils:::menuInstallPkgs()
setwd('C:\\Users\\User\\Documents\\Visual Studio 2012\\Projects\\Repo\\ConsoleApplication1\\Rfiles\\')
source('printsol.r')
source('example1.txt')
source('example2.txt')
pdf('test123.pdf', width = 25, height = 10) #paper = "a4r",
printsol(instance1,tmax,lmax,result$tour,result$intensity,type = "circle",ctourfactor=1)
dev.off()
pdf('test123.pdf', width = 25, height = 10) #paper = "a4r",
printsol(instance1,tmax,lmax,result$tour,result$intensity,type = "rectangle",ctourfactor=1)
dev.off()
save.image()
#quit(save = 'no')
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
setwd('C:\\Users\\User\\Documents\\Visual Studio 2012\\Projects\\Repo\\ConsoleApplication1\\Rfiles\\')
source('printsol.r')
source('example1.txt')
source('example2.txt')
pdf('test123.pdf', width = 25, height = 10) #paper = "a4r",
printsol(instance1,tmax,lmax,result$tour,result$intensity,type = "circle",ctourfactor=1)
dev.off()
pdf('test123.pdf', width = 25, height = 10) #paper = "a4r",
printsol(instance1,tmax,lmax,result$tour,result$intensity,type = "rectangle",ctourfactor=1)
dev.off()
save.image()
#quit(save = 'no')
 g1 <- graph( c( 0,1, 1,2, 2,2, 2,3 ) )
g1 <- graph( c( 0,1, 1,2, 2,2, 2,3 ) )
g1 <- graph( c( 0,1, 1,2, 2,2, 2,3 ), directed=FALSE )
utils:::menuInstallPkgs()
g1 <- graph( c( 0,1, 1,2, 2,2, 2,3 ), directed=FALSE )
q()
